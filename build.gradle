group 'com.couchbase.qe'
version '1.0.0-alpha.1'

apply plugin: 'java-library'
apply plugin: 'maven-publish'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
    maven { url 'http://files.couchbase.com/maven2/' }
    maven { url 'https://repo.spring.io/milestone' }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }

    // Pull in any jars in folder 'libs'
    flatDir {
        dirs 'libs'
    }
}


dependencies {
    def trans_version = "1.1.0"
    def java_client = "default"

    if (project.hasProperty("transaction_version")) {
        trans_version = project.property("transaction_version")
    }
    if (project.hasProperty("client_version")) {
        java_client = project.property("client_version")
    }

    println("Using Transaction_client :: " + trans_version)
    implementation 'com.couchbase.client:couchbase-transactions:' + trans_version

    if (java_client != "default") {
        println("Using Java_client :: " + java_client)
        implementation('com.couchbase.client:java-client') {
            version {
                strictly java_client
            }
        }
    }
    // This will transitively pull in all dependencies of transactions, including Couchbase java-client
    // compile group: 'com.couchbase.client', name: 'couchbase-transactions', version: '1.1.0'
    // compile group: 'com.couchbase.client', name: 'java-client', version: '3.0.8'

    compile group: 'com.jcraft', name: 'jsch', version: '0.1.54'
}

task copyDeps(type: Copy) {
  from configurations.runtime
  into 'jars'
}

task install(type:Exec) {

    if (project.hasProperty("args") && project.hasProperty("jython")) {
        def jythonpath = sourceSets.main.runtimeClasspath.asPath

        def jythonLocation = project.property("jython")
        def testRunnerArgs = project.property("args").split()
        // Add the build output containing the built Java source.  Should get this from a gradle variable really but it's
        // very unlikely to ever change.
        def cmd = [jythonLocation, '-J-cp', jythonpath + ":build/classes/java/main", 'scripts/install.py']

        testRunnerArgs.each { cmd.add(it) }

        println("Running: " + cmd.join(" "))

        commandLine cmd
    }
}

tasks.withType(JavaCompile).all {
    options.forkOptions.jvmArgs += '-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/tmp'
  }

// Task that runs "jython testrunner.py" with the correct CLASSPATH
task testrunner(type:Exec) {

    if (project.hasProperty("args") && project.hasProperty("jython")) {
        def jythonpath = sourceSets.main.runtimeClasspath.asPath

        def jythonLocation = project.property("jython")
        def testRunnerArgs = project.property("args").split()
        // Add the build output containing the built Java source.  Should get this from a gradle variable really but it's
        // very unlikely to ever change.
        def cmd = [jythonLocation, '-J-cp', jythonpath + ":build/classes/java/main:src/main/resources", 'testrunner.py']

        testRunnerArgs.each { cmd.add(it) }

        println("Running: " + cmd.join(" "))

        commandLine cmd
    }
}
// This is needed to compile the src folder which will build java doc ops code in TAF
testrunner.dependsOn(compileJava)

task rerun_job(type:Exec) {
    if (project.hasProperty("args") && project.hasProperty("jython")) {
        def jythonpath = sourceSets.main.runtimeClasspath.asPath
        def jythonLocation = project.property("jython")
        def rerunArgs = project.property("args").split()
        // Add the build output containing the built Java source.  Should get this from a gradle variable really but it's
        // very unlikely to ever change.
        def cmd = [jythonLocation, '-J-cp', jythonpath + ":build/classes/java/main:src/main/resources", 'scripts/rerun_jobs.py']

        rerunArgs.each { cmd.add(it) }

        println("Running: " + cmd.join(" "))

        commandLine cmd
    }
}
rerun_job.dependsOn(compileJava)
